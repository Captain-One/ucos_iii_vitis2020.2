;********************************************************************************************************
;                                              uC/OS-II
;                                        The Real-Time Kernel
;
;                    Copyright 1992-2021 Silicon Laboratories Inc. www.silabs.com
;
;                                 SPDX-License-Identifier: APACHE-2.0
;
;               This software is subject to an open source license and is distributed by
;                Silicon Laboratories Inc. pursuant to the terms of the Apache License,
;                    Version 2.0 available at www.apache.org/licenses/LICENSE-2.0.
;
;********************************************************************************************************

;********************************************************************************************************
;
;                                           Renesas M16C Port
;
; Filename  : os_cpu_a.a30
; Version   : V2.93.01
;********************************************************************************************************
; For       : Renesas M16C
; Toolchain : Renesas HEW IDE with the NC30 compiler
;********************************************************************************************************


;********************************************************************************************************
;                                           PUBLIC FUNCTIONS
;********************************************************************************************************

    .GLB        _OSTCBCur              ; Declared as OS_TCB *               , 32-bit long
    .GLB        _OSTCBHighRdy          ; Declared as OS_TCB *               , 32-bit long
    .GLB        _OSPrioCur             ; Declared as INT8U                  ,  8-bit long
    .GLB        _OSPrioHighRdy         ; Declared as INT8U                  ,  8-bit long
    .GLB        _OSIntNesting          ; Declared as INT8U                  ,  8-bit long
    .GLB        _OSRunning             ; Declared as Boolean (unsigned char),  8-bit long

    .GLB        _OSIntExit             ; External functions written in C
    .GLB        _OSTimeTick
    .GLB        _OSTaskSwHook

;********************************************************************************************************
;                                      CODE GENERATION DIRECTIVES
;********************************************************************************************************


;********************************************************************************************************
;                                           PUBLIC FUNCTIONS
;********************************************************************************************************


;********************************************************************************************************
;                                           START MULTITASKING
;                                       void OSStartHighRdy(void)
;
; Note(s) : 1) OSStartHighRdy() MUST:
;              a) Call OSTaskSwHook() then,
;              b) Set OSRunning to TRUE,
;              c) Switch to the highest priority task.
;********************************************************************************************************


    .SECTION    program
    .GLB        _OSStartHighRdy

_OSStartHighRdy:
    JSR         _OSTaskSwHook

    MOV.W       _OSTCBHighRdy, A0              ; SP = OSTCBHighRdy->OSTCBStkPtr
    LDC         [A0], SP

    MOV.B       #01H, _OSRunning               ; OSRunning = TRUE

    POPM        R0,R1,R2,R3,A0,A1,SB,FB

    REIT

;********************************************************************************************************
;                         PERFORM A CONTEXT SWITCH (From task level) - OSCtxSw()
;
; Note(s) : 1) OSCtxSw() is called in SVC mode with BOTH FIQ and IRQ interrupts DISABLED.
;
;           2) The pseudo-code for OSCtxSw() is:
;              a) Save the current task's context onto the current task's stack,
;              b) OSTCBCur->OSTCBStkPtr = SP;
;              c) OSTaskSwHook();
;              d) OSPrioCur             = OSPrioHighRdy;
;              e) OSTCBCur              = OSTCBHighRdy;
;              f) SP                    = OSTCBHighRdy->OSTCBStkPtr;
;              g) Restore the new task's context from the new task's stack,
;              h) Return to new task's code.
;
;           3) Upon entry:
;              OSTCBCur      points to the OS_TCB of the task to suspend,
;              OSTCBHighRdy  points to the OS_TCB of the task to resume.
;
;           4) OSCtxSw must be mapped to interrupt #0 in the vector table.
;********************************************************************************************************

    .SECTION    program
    .GLB        _OSCtxSw

_OSCtxSw:
    PUSHM       R0,R1,R2,R3,A0,A1,SB,FB

    MOV.W       _OSTCBCur, A0                   ; OSTCBCur->OSTCBStkPtr = SP
    STC         SP, [A0]

    JSR         _OSTaskSwHook                   ; OSTaskSwHook()

    MOV.W       _OSTCBHighRdy,  _OSTCBCur       ; OSTCBCur  = OSTCBHighRdy

    MOV.W       _OSPrioHighRdy, _OSPrioCur      ; OSPrioCur = OSPrioHighRdy

    MOV.W       _OSTCBHighRdy, A0               ; SP        = OSTCBHighRdy->OSTCBStkPtr
    LDC         [A0], SP

    POPM        R0,R1,R2,R3,A0,A1,SB,FB         ; Restore all processor registers from the new task's stack

    REIT


;********************************************************************************************************
;                     PERFORM A CONTEXT SWITCH (From interrupt level) - OSIntCtxSw()
;
; Note(s) : 1) OSIntCtxSw() is called in SVC mode with BOTH FIQ and IRQ interrupts DISABLED.
;
;           2) The pseudo-code for OSCtxSw() is:
;              a) OSTaskSwHook();
;              b) OSPrioCur             = OSPrioHighRdy;
;              c) OSTCBCur              = OSTCBHighRdy;
;              d) SP                    = OSTCBHighRdy->OSTCBStkPtr;
;              e) Restore the new task's context from the new task's stack,
;              f) Return to new task's code.
;
;           3) Upon entry:
;              OSTCBCur      points to the OS_TCB of the task to suspend,
;              OSTCBHighRdy  points to the OS_TCB of the task to resume.
;********************************************************************************************************

    .SECTION    program
    .GLB        _OSIntCtxSw

_OSIntCtxSw:
    JSR         _OSTaskSwHook                   ; OSTaskSwHook()

    MOV.W       _OSTCBHighRdy, _OSTCBCur        ; OSTCBCur  = OSTCBHighRdy

    MOV.W       _OSPrioHighRdy, _OSPrioCur      ; OSPrioCur = OSPrioHighRdy

    MOV.W       _OSTCBHighRdy, A0               ; SP        = OSTCBHighRdy->OSTCBStkPtr
    LDC         [A0], SP

    POPM        R0,R1,R2,R3,A0,A1,SB,FB         ; Restore all processor registers from the new task's stack

    REIT

;********************************************************************************************************
;                                    uC/OS-II TIME TICK ISR
;                                     void OSTickISR(void)
;
; Note(s) : 1) OSTickISR() should be placed on the appropriate interrupt vector.
;
;           2) Pseudo code:
;              a) Save all registers
;              b) OSIntNesting++
;              c) if (OSIntNesting == 1) {
;                     OSTCBCur->OSTCBStkPtr = SP
;                 }
;              d) OSTimeTick();
;              e) OSIntExit();
;              f) Restore all registers
;              g) Return from interrupt;
;********************************************************************************************************

    .SECTION    program
    .GLB        _OSTickISR

_OSTickISR:

    PUSHM       R0,R1,R2,R3,A0,A1,SB,FB             ; Save current task's registers

    INC.B       _OSIntNesting                       ; OSIntNesting++
    CMP.B       #1,_OSIntNesting                    ; if (OSIntNesting == 1) {
    JNE         _OSTickISR1

    MOV.W       _OSTCBCur, A0                       ;     OSTCBCur->OSTCBStkPtr = SP
    STC         SP, [A0]                           ; }

_OSTickISR1:
    JSR         _OSTimeTick                         ; OSTimeTick()

    JSR         _OSIntExit                          ; OSIntExit()

    POPM        R0,R1,R2,R3,A0,A1,SB,FB             ; Restore registers from the new task's stack

    REIT



    .END
