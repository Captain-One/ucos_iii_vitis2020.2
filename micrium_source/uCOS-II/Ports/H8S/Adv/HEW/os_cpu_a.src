;********************************************************************************************************
;                                              uC/OS-II
;                                        The Real-Time Kernel
;
;                    Copyright 1992-2021 Silicon Laboratories Inc. www.silabs.com
;
;                                 SPDX-License-Identifier: APACHE-2.0
;
;               This software is subject to an open source license and is distributed by
;                Silicon Laboratories Inc. pursuant to the terms of the Apache License,
;                    Version 2.0 available at www.apache.org/licenses/LICENSE-2.0.
;
;********************************************************************************************************

;********************************************************************************************************
;
;                                          H8S  Specific code
;
; Filename : os_cpu_a.src
; Version  : V2.93.01
;********************************************************************************************************

;********************************************************************************************************
;                                         Cross references
;********************************************************************************************************
;
          .EXPORT   _OSStartHighRdy     ; Public functions
          .EXPORT   _OSCtxSw
          .EXPORT   _OSIntCtxSw
          .EXPORT   _OSTickISR

          .IMPORT   _OSIntEnter         ; External functions
          .IMPORT   _OSIntExit
          .IMPORT   _OSTimeTick
          .IMPORT   _OSTaskSwHook

          .IMPORT   _OSTCBCur           ; External variables (uC/OS-II)
          .IMPORT   _OSTCBHighRdy
          .IMPORT   _OSPrioCur
          .IMPORT   _OSPrioHighRdy
          .IMPORT   _OSIntNesting
          .IMPORT   _OSRunning

          .IMPORT   _TickClr            ; Function to clear the timer interrupt

;********************************************************************************************************
;                                              Equates
;********************************************************************************************************



;********************************************************************************************************
;                                              MACROS
;
; Note(s): 1) Save 32-bit registers in case they were used in the application code.
;********************************************************************************************************
;
          .MACRO   PUSHALL
          PUSH.L    ER0
          PUSH.L    ER1
          PUSH.L    ER2
          PUSH.L    ER3
          PUSH.L    ER4
          PUSH.L    ER5
          PUSH.L    ER6
          .ENDM

          .MACRO   POPALL
          POP.L     ER6
          POP.L     ER5
          POP.L     ER4
          POP.L     ER3
          POP.L     ER2
          POP.L     ER1
          POP.L     ER0
          .ENDM


;*********************************************************************************************************
;                                         START MULTITASKING
;
; Description : This function is called by OSStart() to start the highest priority task that was created
;               by your application before calling OSStart().
;
; Arguments   : none
;
; Note(s)     : 1) The stack frame is assumed to look as follows:
;
;
;                  OSTCBHighRdy->OSTCBStkPtr +  0  ---->  ER6          LOW MEMORY
;                                            +  4         ER5
;                                            +  8         ER4
;                                            + 12         ER3
;                                            + 16         ER2
;                                            + 20         ER1
;                                            + 24         ER0
;                                            + 28         CCR
;                                            + 29         task        (24-bit address  of 'task')
;                                            + 32         p_arg       (contents of 'p_arg')
;                                                                     HIGH MEMORY
;
;               2) OSStartHighRdy() MUST:
;                      a) Call OSTaskSwHook() then,
;                      b) Set OSRunning to TRUE,
;                      c) Switch to the highest priority task.
;*********************************************************************************************************

_OSStartHighRdy:
          JSR      @_OSTaskSwHook        ; Execute task switch hook
;
          MOV.B    #1,  R6L              ; Set OSRunning to TRUE
          MOV.B    R6L, @_OSRunning
;
          MOV.L    @_OSTCBHighRdy, ER0    ; SP = OSTCBHighRdy->OSTCBStkPtr
          MOV.L    #_OSTCBCur, ER1
          MOV.L    ER0,  @ER1
          MOV.L    @ER0, ER7
;
          POPALL                         ; Restore task registers
;
          RTE


;*********************************************************************************************************
;                                       TASK LEVEL CONTEXT SWITCH
;
; Description : This function is called when a task makes a higher priority task ready-to-run.
;
; Arguments   : none
;
; Note(s)     : 1) Upon entry,
;                  OSTCBCur     points to the OS_TCB of the task to suspend
;                  OSTCBHighRdy points to the OS_TCB of the task to resume
;
;               2) The stack frame of the task to suspend looks as follows.  This was caused by the
;                  execution of a TRAPA #0 instruction (the registers for the task to suspend need to be
;                  saved):
;
;                                                                                          LOW MEMORY
;                                         SP +  0  ---->  8 bit CCR
;                                            +  1  ---->  PC of task
;                                                                                          HIGH MEMORY
;
;               3) The stack frame of the task to resume looks as follows:
;
;                                                                                          LOW MEMORY
;                  OSTCBHighRdy->OSTCBStkPtr +  0  ---->  ER6
;                                            +  4         ER5
;                                            +  8         ER4
;                                            + 12         ER3
;                                            + 16         ER2
;                                            + 20         ER1
;                                            + 24         ER0
;                                            + 28         CCR
;                                            + 29         PC of task (24-bit)
;                                                                                          HIGH MEMORY
;
;*********************************************************************************************************

_OSCtxSw:
          PUSHALL                        ; Save processor registers R0 to R6
;
          MOV.L    @_OSTCBCur, ER6       ; Save current task's SP into its TCB
          MOV.L    ER7, @ER6
;
          JSR      @_OSTaskSwHook        ; Execute task switch hook
;
          MOV.B    @_OSPrioHighRdy, R1L  ; OSPrioCur = OSPrioHighRdy
          MOV.B    R1L, @_OSPrioCur
;
          MOV.L    @_OSTCBHighRdy, ER6   ; Get new task's SP from its TCB
          MOV.L    ER6,  @_OSTCBCur      ; OSTCBCur = OSTCBHighRdy
          MOV.L    @ER6, ER7             ; SP       = OSTCBHighRdy->OSTCBStkPtr
;
          POPALL                         ; Restore processor registers R0 to R6
;
          RTE                            ; Return to task


;*********************************************************************************************************
;                               PERFORM A CONTEXT SWITCH (From an ISR)
;
; Description : This function is called when an ISR makes a higher priority task ready-to-run.
;
; Arguments   : none
;
; Note(s)     : 1) Upon entry,
;                  OSTCBCur     points to the OS_TCB of the task to suspend
;                  OSTCBHighRdy points to the OS_TCB of the task to resume
;
;               2) The stack frame of the task to suspend looks as follows.
;
;                                                                                          LOW MEMORY
;                                        SP  +  0         Return address of OSIntCtxSw()
;                                            +  4         ER3 saved upon entry by OSIntExit
;                                            +  8         ER2 saved upon entry by OSIntExit
;                                            + 12         Return address of OSIntExit()
;                                            + 16         ER6
;                                            + 20         ER5
;                                            + 24         ER4
;                                            + 28         ER3
;                                            + 32         ER2
;                                            + 36         ER1
;                                            + 40         ER0
;                                            + 44         CCR
;                                            + 45         PC of task (24-bit)
;                                                                                          HIGH MEMORY
;
;               3) The stack frame of the task to resume looks as follows:
;
;                                                                                          LOW MEMORY
;                  OSTCBHighRdy->OSTCBStkPtr +  0  ---->  ER6
;                                            +  4         ER5
;                                            +  8         ER4
;                                            + 12         ER3
;                                            + 16         ER2
;                                            + 20         ER1
;                                            + 24         ER0
;                                            + 28         CCR
;                                            + 29         PC of task (24-bit)
;                                                                                          HIGH MEMORY
;*********************************************************************************************************

_OSIntCtxSw:
          JSR      @_OSTaskSwHook        ; Execute task switch hook
;
          MOV.B    @_OSPrioHighRdy, R1L  ; OSPrioCur = OSPrioHighRdy
          MOV.B    R1L, @_OSPrioCur
;
          MOV.L    @_OSTCBHighRdy, ER6   ; OSTCBCur = OSTCBHighRdy
          MOV.L    ER6, @_OSTCBCur
          MOV.L    @ER6, ER7              ; SP = OSTCBCur->OSTCBStkPtr
;
          POPALL
;
          RTE


;*********************************************************************************************************
;                                            TICK ISR
;
; Note(s)    : The following C-like pseudo-code describe the operation being performed in the code below.
;
;              Save all registers on the current task's stack;
;              OSIntNesting++;
;              if (OSIntNesting == 1) {
;                 OSTCBCur->OSTCBStkPtr = SP
;              }
;              Clear the interrupt;                  Not needed for the timer we used.
;              OSTimeTick();                         Notify uC/OS-II that a tick has occured
;              OSIntExit();                          Notify uC/OS-II about end of ISR
;              Restore all registers that were save on the current task's stack;
;              Return from Interrupt;
;*********************************************************************************************************

_OSTickISR:
          PUSHALL                           ; Save registers of interrupted task
;
          MOV.B    @_OSIntNesting, R6L      ; OSIntNesting++;
          INC.B    R6L
          MOV.B    R6L, @_OSIntNesting
;
          CMP.B    #1,R6L                   ; if (OSIntNesting == 1) {
          BNE      _OSTickISR_1

          MOV.L    @_OSTCBCur, ER6           ;     Save current task's SP into its TCB
          MOV.L    ER7, @ER6                ;
;                                           ; }
;
_OSTickISR_1:
          JSR      @_TickClr
;
          JSR      @_OSTimeTick             ; Tick occurred, call kernel functions
;
          JSR      @_OSIntExit

          POPALL
;
          RTE

          .END
