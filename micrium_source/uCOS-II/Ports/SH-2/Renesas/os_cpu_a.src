;********************************************************************************************************
;                                              uC/OS-II
;                                        The Real-Time Kernel
;
;                    Copyright 1992-2021 Silicon Laboratories Inc. www.silabs.com
;
;                                 SPDX-License-Identifier: APACHE-2.0
;
;               This software is subject to an open source license and is distributed by
;                Silicon Laboratories Inc. pursuant to the terms of the Apache License,
;                    Version 2.0 available at www.apache.org/licenses/LICENSE-2.0.
;
;********************************************************************************************************

;********************************************************************************************************
;
;                                      Renesas SH-2 Specific code
;                               Renesas C/C++ Compiler Toolchain v8.0.1.0
;
; Filename : os_cpu_a.src
; Version  : V2.93.01
;********************************************************************************************************

        .EXPORT _OSStartHighRdy
        .EXPORT _OSCtxSw
        .EXPORT _OSIntCtxSw
        .EXPORT _OSTickISR
        .IMPORT _OSTaskSwHook
        .IMPORT _OSTCBHighRdy
        .IMPORT _OSRunning
        .IMPORT _OSTCBCur
        .IMPORT _OSPrioCur
        .IMPORT _OSPrioHighRdy
        .IMPORT _OSIntEnter
        .IMPORT _OSTimeTick
        .IMPORT _OSIntExit
        .IMPORT _OSIntNesting


        .SECTION    P,CODE,ALIGN=4

_OSStartHighRdy:
        mov.l   #_OSTaskSwHook, r1          ; address of OSTaskSwHook function in R1
        jsr     @r1                         ; call OSTaskSwHook()
        nop

        mov.l   #_OSTCBHighRdy, r1          ; address of OSTCBHighRdy in R1
        mov.l   @r1, r2                     ; r2 is now the address of the ready task
        mov.l   @r2, r15                    ; stack pointer = OSTCBHighRdy->OSTCBStkptr

        mov.l   #_OSRunning, r1             ; address of OSRunning in R1
        mov     #1, r2                      ; OSRunning = TRUE (1)
        mov.b   r2, @r1

; restore all processor registers from new task's stack

        mov.l   @r15+, r14
        mov.l   @r15+, r13
        mov.l   @r15+, r12
        mov.l   @r15+, r11
        mov.l   @r15+, r10
        mov.l   @r15+, r9
        mov.l   @r15+, r8
        mov.l   @r15+, r7
        mov.l   @r15+, r6
        mov.l   @r15+, r5
        mov.l   @r15+, r4
        mov.l   @r15+, r3
        mov.l   @r15+, r2
        mov.l   @r15+, r1
        mov.l   @r15+, r0
        lds.l   @r15+, pr
        ldc.l   @r15+, gbr
        lds.l   @r15+, mach
        lds.l   @r15+, macl

        rte                                 ; return from interrupt
        nop


_OSCtxSw:                                   ; save processor registers on the stack
        sts.l   macl, @-r15
        sts.l   mach, @-r15
        stc.l   gbr, @-r15
        sts.l   pr, @-r15
        mov.l   r0, @-r15
        mov.l   r1, @-r15
        mov.l   r2, @-r15
        mov.l   r3, @-r15
        mov.l   r4, @-r15
        mov.l   r5, @-r15
        mov.l   r6, @-r15
        mov.l   r7, @-r15
        mov.l   r8, @-r15
        mov.l   r9, @-r15
        mov.l   r10, @-r15
        mov.l   r11, @-r15
        mov.l   r12, @-r15
        mov.l   r13, @-r15
        mov.l   r14, @-r15

; save current task's stack pointer into current task's OS_TCB

        mov.l   #_OSTCBCur, r0              ; get address of OSTCBCur
        mov.l   @r0, r3                     ; R3 contains address of current TCB
        mov.l   r15, @r3                    ; put stack pointer into it

        mov.l   #_OSTaskSwHook, r2
        jsr     @r2                         ; call OSTaskSWHook
        nop

        mov.l   #_OSTCBCur, r0              ; get address of OSTCBCur
        mov.l   #_OSTCBHighRdy, r1          ; get address of OSTCBHighRdy
        mov.l   @r1, r3
        mov.l   r3, @r0                     ; OSTCBCur = OSTCBHighRdy

        mov.l   #_OSPrioCur, r0             ; get address of OSPrioCur
        mov.l   #_OSPrioHighRdy, r2         ; get address of OSPrioHighRdy
        mov.b   @r2, r3
        mov.b   r3, @r0

        mov.l   @r1, r2                     ; r2 contains address of current TCB
        mov.l   @r2, r15                    ; stack pointer = OSTCBHighRdy->OSTCBStkPtr

; restore all processor registers from new task's stack

        mov.l   @r15+, r14
        mov.l   @r15+, r13
        mov.l   @r15+, r12
        mov.l   @r15+, r11
        mov.l   @r15+, r10
        mov.l   @r15+, r9
        mov.l   @r15+, r8
        mov.l   @r15+, r7
        mov.l   @r15+, r6
        mov.l   @r15+, r5
        mov.l   @r15+, r4
        mov.l   @r15+, r3
        mov.l   @r15+, r2
        mov.l   @r15+, r1
        mov.l   @r15+, r0
        lds.l   @r15+, pr
        ldc.l   @r15+, gbr
        lds.l   @r15+, mach
        lds.l   @r15+, macl

        rte
        nop


_OSIntCtxSw:
        mov.l   #_OSTaskSwHook, r2
        jsr     @r2                         ; call OSTaskSWHook
        nop

        mov.l   #_OSPrioHighRdy, r2         ; get address of OSPrioHighRdy
        mov.l   #_OSPrioCur, r0             ; get address of OSPrioCur
        mov.b   @r2, r3
        mov.b   r3, @r0                     ; OSPrioCur = OSPrioHighRdy

        mov.l   #_OSTCBHighRdy, r1          ; get address of OSTCBHighRdy
        mov.l   #_OSTCBCur, r0              ; get address of OSTCBCur
        mov.l   @r1, r3
        mov.l   r3, @r0                     ; OSTCBCur = OSTCBHighRdy

        mov.l   @r3, r15                    ; CPU stack pointer = OSTCBHighRdy->OSTCBStkPtr

; restore all processor registers from new task's stack

        mov.l   @r15+, r14
        mov.l   @r15+, r13
        mov.l   @r15+, r12
        mov.l   @r15+, r11
        mov.l   @r15+, r10
        mov.l   @r15+, r9
        mov.l   @r15+, r8
        mov.l   @r15+, r7
        mov.l   @r15+, r6
        mov.l   @r15+, r5
        mov.l   @r15+, r4
        mov.l   @r15+, r3
        mov.l   @r15+, r2
        mov.l   @r15+, r1
        mov.l   @r15+, r0
        lds.l   @r15+, pr
        ldc.l   @r15+, gbr
        lds.l   @r15+, mach
        lds.l   @r15+, macl

        rte
        nop


_OSTickISR:
; Save processor registers on the stack

        sts.l   macl, @-r15
        sts.l   mach, @-r15
        stc.l   gbr, @-r15
        sts.l   pr, @-r15
        mov.l   r0, @-r15
        mov.l   r1, @-r15
        mov.l   r2, @-r15
        mov.l   r3, @-r15
        mov.l   r4, @-r15
        mov.l   r5, @-r15
        mov.l   r6, @-r15
        mov.l   r7, @-r15
        mov.l   r8, @-r15
        mov.l   r9, @-r15
        mov.l   r10, @-r15
        mov.l   r11, @-r15
        mov.l   r12, @-r15
        mov.l   r13, @-r15
        mov.l   r14, @-r15

; clear compare match interupt

        mov.l   #_OSIntNesting, r1      ; Increment OSIntNesting
        mov.b   @r1, r0
        extu.b  r0, r0
        add     #1, r0
        mov.b   r0, @r1                 ; If OSIntNesting == 1 save the current stack pointer
        tst     #1, r0                  ; onto the current task's stack
        bt      _OSTickISR1

        mov.l   #_OSTCBCur, r1          ; Save current task's SP into its TCB
        mov.l   @r1, r0
        mov     r15, @r0

_OSTickISR1:
        mov.l   #CMT0_CMCSR0, r3        ; clear CMT0 compare match flag in CMCSR
        mov.l   #CMT0_CMF, r2
        mov.l   @r3, r3
        mov.l   @r2, r2
        mov.w   @r3, r1
        and     r2, r1                  ; clear CMF bit
        mov.w   r1, @r3

        mov.l   #_OSTimeTick, r0
        jsr     @r0                     ; call OSTimeTick()
        nop

        mov.l   #_OSIntExit, r0
        jsr     @r0                     ; call OSIntExit()
        nop

; restore all processor registers from stack

        mov.l   @r15+, r14
        mov.l   @r15+, r13
        mov.l   @r15+, r12
        mov.l   @r15+, r11
        mov.l   @r15+, r10
        mov.l   @r15+, r9
        mov.l   @r15+, r8
        mov.l   @r15+, r7
        mov.l   @r15+, r6
        mov.l   @r15+, r5
        mov.l   @r15+, r4
        mov.l   @r15+, r3
        mov.l   @r15+, r2
        mov.l   @r15+, r1
        mov.l   @r15+, r0
        lds.l   @r15+, pr
        ldc.l   @r15+, gbr
        lds.l   @r15+, mach
        lds.l   @r15+, macl

        rte
        nop

        .ALIGN 4
CMT0_CMCSR0:
        .DATA.L h'ffff83d2
CMT0_CMF:
        .DATA.L h'0000ff7f

        .END
