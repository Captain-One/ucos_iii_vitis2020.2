;********************************************************************************************************
;                                              uC/OS-II
;                                        The Real-Time Kernel
;
;                    Copyright 1992-2021 Silicon Laboratories Inc. www.silabs.com
;
;                                 SPDX-License-Identifier: APACHE-2.0
;
;               This software is subject to an open source license and is distributed by
;                Silicon Laboratories Inc. pursuant to the terms of the Apache License,
;                    Version 2.0 available at www.apache.org/licenses/LICENSE-2.0.
;
;********************************************************************************************************

;********************************************************************************************************
;
;                                           Renesas R32C Port
;
; Filename  : os_cpu_a.s53
; Version   : V2.93.01
;********************************************************************************************************
; For       : Renesas R32C
; Toolchain : IAR For Renesas R32C V1.31
;********************************************************************************************************

;********************************************************************************************************
;                                           PUBLIC FUNCTIONS
;********************************************************************************************************

          PUBLIC   OSStartHighRdy      ; Public functions
          PUBLIC   OSCtxSw
          PUBLIC   OSIntCtxSw
          PUBLIC   OSTickISR
          PUBLIC   OS_CPU_SR_Save
          PUBLIC   OS_CPU_SR_Restore

          EXTERN   OSIntExit
          EXTERN   OSTimeTick
          EXTERN   OSTaskSwHook

          EXTERN   OSTCBCur            ; External variables (uC/OS-II)
          EXTERN   OSTCBHighRdy
          EXTERN   OSPrioCur
          EXTERN   OSPrioHighRdy
          EXTERN   OSIntNesting
          EXTERN   OSRunning

;********************************************************************************************************
;                                      CODE GENERATION DIRECTIVES
;********************************************************************************************************

          RSEG     CODE32:CODE:NOROOT(4)

;********************************************************************************************************
;                                   CRITICAL SECTION METHOD 3 FUNCTIONS
;
; Description: Disable/Enable interrupts by preserving the state of interrupts.  Generally speaking you
;              would store the state of the interrupt disable flag in the local variable 'cpu_sr' and then
;              disable interrupts.  'cpu_sr' is allocated in all of uC/OS-II's functions that need to
;              disable interrupts.  You would restore the interrupt disable state by copying back 'cpu_sr'
;              into the CPU's status register.
;
; Prototypes :     OS_CPU_SR  OS_CPU_SR_Save(void);
;                  void       OS_CPU_SR_Restore(OS_CPU_SR cpu_sr);
;
;
; Note(s)    : 1) These functions are used in general like this:
;
;                 void Task (void *p_arg)
;                 {
;                 #if OS_CRITICAL_METHOD == 3          /* Allocate storage for CPU status register */
;                     OS_CPU_SR  cpu_sr;
;                 #endif
;
;                          :
;                          :
;                     OS_ENTER_CRITICAL();             /* cpu_sr = OS_CPU_SaveSR();                */
;                          :
;                          :
;                     OS_EXIT_CRITICAL();              /* OS_CPU_RestoreSR(cpu_sr);                */
;                          :
;                          :
;                 }
;********************************************************************************************************

OS_CPU_SR_Save
    STC     FLG, R2R0                                           ; Set prio int mask to mask all (except faults)
    FCLR    I
    RTS

OS_CPU_SR_Restore
    LDC     R2R0, FLG
    RTS

;********************************************************************************************************
;                                           START MULTITASKING
;                                       void OSStartHighRdy(void)
;
; Note(s) : 1) OSStartHighRdy() MUST:
;              a) Call OSTaskSwHook() then,
;              b) Set OSRunning to TRUE,
;              c) Switch to the highest priority task.
;********************************************************************************************************


OSStartHighRdy:
    JSR         OSTaskSwHook

    MOV.L       OSTCBHighRdy, A0                                        ; ISP = OSTCBHighRdy->OSTCBStkPtr
    LDC         [A0], SP

    MOV.B       #01H, OSRunning                                         ; OSRunning = TRUE

    POPM        R2R0,R3R1,R6R4,R7R5,A0,A1,A2,A3,SB
    POPC        FB

    REIT

;********************************************************************************************************
;                         PERFORM A CONTEXT SWITCH (From task level) - OSCtxSw()
;
; Note(s) : 1) OSCtxSw() is called in SVC mode with BOTH FIQ and IRQ interrupts DISABLED.
;
;           2) The pseudo-code for OSCtxSw() is:
;              a) Save the current task's context onto the current task's stack,
;              b) OSTCBCur->OSTCBStkPtr = SP;
;              c) OSTaskSwHook();
;              d) OSPrioCur             = OSPrioHighRdy;
;              e) OSTCBCur              = OSTCBHighRdy;
;              f) SP                    = OSTCBHighRdy->OSTCBStkPtr;
;              g) Restore the new task's context from the new task's stack,
;              h) Return to new task's code.
;
;           3) Upon entry:
;              OSTCBCur      points to the OS_TCB of the task to suspend,
;              OSTCBHighRdy  points to the OS_TCB of the task to resume.
;
;           4) OSCtxSw must be mapped to interrupt #0 in the vector table.
;********************************************************************************************************

OSCtxSw:
    PUSHC       FB
    PUSHM       SB,A3,A2,A1,A0,R7R5,R6R4,R3R1,R2R0

    MOV.L       OSTCBCur, A0                                            ; OSTCBCur->OSTCBStkPtr = SP
    STC         ISP, [A0]

    JSR         OSTaskSwHook                                            ; OSTaskSwHook()

    MOV.L       OSTCBHighRdy, OSTCBCur                                  ; OSTCBCur  = OSTCBHighRdy

    MOV.B       OSPrioHighRdy, OSPrioCur                                ; OSPrioCur = OSPrioHighRdy

    MOV.L       OSTCBHighRdy, A0                                        ; SP        = OSTCBHighRdy->OSTCBStkPtr
    LDC         [A0], ISP

    POPM        R2R0,R3R1,R6R4,R7R5,A0,A1,A2,A3,SB                      ; Restore all processor registers from the new task's stack
    POPC        FB

    REIT


;********************************************************************************************************
;                     PERFORM A CONTEXT SWITCH (From interrupt level) - OSIntCtxSw()
;
; Note(s) : 1) OSIntCtxSw() is called in SVC mode with BOTH FIQ and IRQ interrupts DISABLED.
;
;           2) The pseudo-code for OSCtxSw() is:
;              a) OSTaskSwHook();
;              b) OSPrioCur             = OSPrioHighRdy;
;              c) OSTCBCur              = OSTCBHighRdy;
;              d) SP                    = OSTCBHighRdy->OSTCBStkPtr;
;              e) Restore the new task's context from the new task's stack,
;              f) Return to new task's code.
;
;           3) Upon entry:
;              OSTCBCur      points to the OS_TCB of the task to suspend,
;              OSTCBHighRdy  points to the OS_TCB of the task to resume.
;********************************************************************************************************

OSIntCtxSw:
    JSR         OSTaskSwHook                                            ; OSTaskSwHook()

    MOV.L       OSTCBHighRdy, OSTCBCur                                  ; OSTCBCur  = OSTCBHighRdy

    MOV.B       OSPrioHighRdy, OSPrioCur                                ; OSPrioCur = OSPrioHighRdy

    MOV.L       OSTCBHighRdy, A0                                        ; SP        = OSTCBHighRdy->OSTCBStkPtr
    LDC         [A0], ISP

    POPM        R2R0,R3R1,R6R4,R7R5,A0,A1,A2,A3,SB                      ; Restore all processor registers from the new task's stack
    POPC        FB

    REIT

;********************************************************************************************************
;                                    uC/OS-II TIME TICK ISR
;                                     void OSTickISR(void)
;
; Note(s) : 1) OSTickISR() should be placed on the appropriate interrupt vector.
;
;           2) Pseudo code:
;              a) Save all registers
;              b) OSIntNesting++
;              c) if (OSIntNesting == 1) {
;                     OSTCBCur->OSTCBStkPtr = SP
;                 }
;              d) OSTimeTick();
;              e) OSIntExit();
;              f) Restore all registers
;              g) Return from interrupt;
;********************************************************************************************************

OSTickISR:

    PUSHC       FB
    PUSHM       SB,A3,A2,A1,A0,R7R5,R6R4,R3R1,R2R0                      ; Save current task's registers

    INC.B       OSIntNesting                                            ; OSIntNesting++
    CMP.B       #1, OSIntNesting                                        ; if (OSIntNesting == 1) {
    JNE         OSTickISR1

    MOV.L       OSTCBCur, A0                                            ;     OSTCBCur->OSTCBStkPtr = SP
    STC         ISP, [A0]                                               ; }

OSTickISR1:
    JSR         OSTimeTick                                              ; OSTimeTick()

    JSR         OSIntExit                                               ; OSIntExit()

    POPM        R2R0,R3R1,R6R4,R7R5,A0,A1,A2,A3,SB                      ; Restore all processor registers from the new task's stack
    POPC        FB

    REIT


    END
